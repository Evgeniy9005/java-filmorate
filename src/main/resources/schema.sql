
--create filmorate sa superuser; -- создать пользователя для проекта
--alter filmorate sa password 'password'; -- задать пароль пользователя
--create database filmorate with owner sa; -- создать базу данных проекта и её владельца
--CREATE DATABASE IF NOT EXISTS DB;

CREATE TABLE IF NOT EXISTS PUBLIC.TEST (
	TEST_ID INTEGER NOT NULL AUTO_INCREMENT,
	WORD CHARACTER VARYING(16)
);

-- PUBLIC.USERS definition

-- Drop table

-- DROP TABLE PUBLIC.USERS;

CREATE TABLE if not exists PUBLIC.FILM_GENRE (
	GENRE_ID INTEGER NOT NULL AUTO_INCREMENT,
	GENRE CHARACTER VARYING(64),
	CONSTRAINT FILM_GENRE_PK PRIMARY KEY (GENRE_ID),
	UNIQUE (GENRE)
);
CREATE UNIQUE INDEX if not exists PRIMARY_KEY_7 ON PUBLIC.FILM_GENRE (GENRE_ID);


CREATE TABLE if not exists PUBLIC.MPA (
	MPA_ID INTEGER NOT NULL AUTO_INCREMENT,
	MPA_RATING CHARACTER VARYING(16),
	CONSTRAINT MPA_PK PRIMARY KEY (MPA_ID),
	UNIQUE (MPA_RATING)
);
CREATE UNIQUE INDEX if not exists PRIMARY_KEY_1 ON PUBLIC.MPA (MPA_ID);


CREATE TABLE if not exists PUBLIC.FILMS (
	FILM_ID INTEGER NOT NULL AUTO_INCREMENT,
	FILM_NAME CHARACTER VARYING(100),
	FILM_DESCRIPTION CHARACTER VARYING(200),
	FILM_RELEASE_DATE TIMESTAMP,
	FILM_DURATION INTEGER,
	MPA_ID INTEGER,
	CONSTRAINT DURATION_POSITIVE CHECK ("FILM_DURATION" >= 0),
	CONSTRAINT FILMS_MPA_FK FOREIGN KEY (MPA_ID) REFERENCES MPA (MPA_ID),
	CONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID),
	CONSTRAINT FILM_RELEASE_DATE CHECK("FILM_RELEASE_DATE" > TIMESTAMP '1895-12-28 00:00:00')
);
CREATE INDEX if not exists FILMS_MPA_FK_INDEX_3 ON PUBLIC.FILMS (MPA_ID);
--CREATE UNIQUE INDEX if not exists PRIMARY_KEY_2 ON PUBLIC.FILMS (FILM_ID);
--CREATE UNIQUE INDEX if not exists PRIMARY_KEY_8 ON PUBLIC.FILMS (FILM_ID);



CREATE TABLE if not exists PUBLIC.USERS (
	USER_ID INTEGER NOT NULL AUTO_INCREMENT,
	USER_EMAIL CHARACTER VARYING(64) NOT NULL,
	USER_LOGIN CHARACTER VARYING(64) NOT NULL,
	USER_NAME CHARACTER VARYING(64) NOT NULL,
	USER_BIRTHDAY DATE,
	CONSTRAINT DATE_PAST CHECK("USER_BIRTHDAY" <= LOCALTIMESTAMP),
	CONSTRAINT USERS_PK PRIMARY KEY (USER_ID),
	UNIQUE (USER_EMAIL),
	UNIQUE (USER_LOGIN)
	--CONSTRAINT USERS_UN UNIQUE (USER_ID,USER_EMAIL,USER_LOGIN)
);
CREATE UNIQUE INDEX if not exists PRIMARY_KEY_4 ON PUBLIC.USERS (USER_ID);
--CREATE UNIQUE INDEX if not exists PRIMARY_KEY_BF ON PUBLIC.USERS (USER_ID);
--CREATE UNIQUE INDEX if not exists USERS_UN_INDEX_4 ON PUBLIC.USERS (USER_EMAIL,USER_LOGIN,USER_ID);
--CREATE UNIQUE INDEX if not exists USERS_UN_INDEX_B ON PUBLIC.USERS (USER_EMAIL,USER_LOGIN,USER_ID);


CREATE TABLE if not exists PUBLIC.FRIENDS (
	FRIENDS_ID INTEGER NOT NULL AUTO_INCREMENT,
	USER_ID INTEGER NOT NULL,
	FRIEND_ID INTEGER NOT NULL,
	CHECK_FRIEND BOOLEAN DEFAULT FALSE NOT NULL,
	CONSTRAINT FRIENDS_PK PRIMARY KEY (FRIENDS_ID),
	CONSTRAINT FRIENDS_UN UNIQUE (FRIEND_ID,USER_ID),
	CONSTRAINT U_NO_U CHECK("USER_ID" <> "FRIEND_ID"),
	CONSTRAINT FRIENDS_USER_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT FRIENDS_FRIEND_FK FOREIGN KEY (FRIEND_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE UNIQUE INDEX if not exists PRIMARY_KEY_70 ON PUBLIC.FRIENDS (FRIENDS_ID);
CREATE UNIQUE INDEX if not exists FRIENDS_UN_INDEX_7 ON PUBLIC.FRIENDS (USER_ID,FRIEND_ID);
--CREATE INDEX if not exists FRIENDS_USERS_FK_1_INDEX_7 ON PUBLIC.FRIENDS (FRIEND_ID);
--CREATE INDEX if not exists FRIENDS_USERS_FK_INDEX_7 ON PUBLIC.FRIENDS (USER_ID);



CREATE TABLE if not exists PUBLIC.FILM_LIKES (
	FILM_LIKES_ID INTEGER NOT NULL AUTO_INCREMENT,
	FILM_ID INTEGER,
	USER_ID INTEGER,
	CONSTRAINT FILM_LIKES_PK PRIMARY KEY (FILM_LIKES_ID),
	CONSTRAINT FILM_LIKES_FILMS_FK FOREIGN KEY (FILM_ID)  REFERENCES FILMS (FILM_ID) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT FILM_LIKES_USERS_FK_1 FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT FILM_ID_USER_ID UNIQUE (FILM_ID, USER_ID)
);
CREATE INDEX if not exists FILM_LIKES_FILMS_FK_INDEX_7 ON PUBLIC.FILM_LIKES (FILM_ID) ;
CREATE INDEX if not exists FILM_LIKES_USERS_FK_1_INDEX_7 ON PUBLIC.FILM_LIKES (USER_ID);
CREATE UNIQUE INDEX if not exists PRIMARY_KEY_7A ON PUBLIC.FILM_LIKES (FILM_LIKES_ID);


-- PUBLIC.FILM_LIKES foreign keys

--ALTER TABLE PUBLIC.FILM_LIKES ADD CONSTRAINT FILM_LIKES_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID) ON DELETE CASCADE ON UPDATE CASCADE;
--ALTER TABLE PUBLIC.FILM_LIKES ADD CONSTRAINT FILM_LIKES_USERS_FK_1 FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE;


CREATE TABLE if not exists PUBLIC.GENRES (
	GENRES_ID INTEGER NOT NULL AUTO_INCREMENT,
	FILM_ID INTEGER,
	GENRE_ID INTEGER,
	CONSTRAINT GENRES_PK PRIMARY KEY (GENRES_ID),
	CONSTRAINT GENRES_FILM_GENRE_FK FOREIGN KEY (FILM_ID)  REFERENCES FILMS (FILM_ID) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT GENRES_GENRE_FK FOREIGN KEY (GENRE_ID) REFERENCES FILM_GENRE (GENRE_ID) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX if not exists GENRES_FILMS_FK_INDEX_7 ON PUBLIC.GENRES (FILM_ID);
CREATE INDEX if not exists GENRES_FILM_GENRE_FK_INDEX_7 ON PUBLIC.GENRES (GENRE_ID);
CREATE UNIQUE INDEX if not exists PRIMARY_KEY_7D ON PUBLIC.GENRES (GENRES_ID);